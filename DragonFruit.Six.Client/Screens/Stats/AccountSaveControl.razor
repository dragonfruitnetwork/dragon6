@using DragonFruit.Six.Api.Accounts.Entities
@using DragonFruit.Six.Client.Database.Entities
@using Realms
@using AutoMapper

@implements IDisposable

<button class="btn btn-text text-@(IsSaved ? "warning" : "secondary")" @onclick="ToggleSave">
    <i class="fa-solid fa-star"></i>
</button>

@code {

    private Realm _notificationRealm;
    private IDisposable _notificationListener;

    [Parameter]
    public UbisoftAccount Account { get; set; }

    [Inject]
    public IMapper Mapper { get; set; }

    private bool IsSaved { get; set; }

    protected override void OnParametersSet()
    {
        Dispose();
        _notificationRealm = Realm.GetInstance();

        _notificationListener?.Dispose();
        _notificationListener = _notificationRealm.All<SavedAccount>().SubscribeForNotifications((sender, _, _) =>
        {
            IsSaved = sender.Any(x => x.ProfileId == Account.ProfileId);
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task ToggleSave()
    {
        using var realm = await Realm.GetInstanceAsync();
        using var transaction = await realm.BeginWriteAsync();

        if (IsSaved)
        {
            var account = realm.Find<SavedAccount>(Account.ProfileId);
            if (account != null)
            {
                realm.Remove(account);
            }
        }
        else
        {
            var savedAccount = Mapper.Map<SavedAccount>(Account);
            realm.Write(() => _notificationRealm.Add(savedAccount));
        }

        await transaction.CommitAsync().ConfigureAwait(false);
    }

    public void Dispose()
    {
        _notificationListener?.Dispose();
        _notificationRealm?.Dispose();
    }

}