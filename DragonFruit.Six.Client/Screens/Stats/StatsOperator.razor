@using DragonFruit.Six.Client.Database.Entities
@using DragonFruit.Six.Api.Modern.Entities
@using DragonFruit.Six.Api.Accounts.Entities
@using DragonFruit.Six.Api
@using DragonFruit.Six.Api.Enums
@using DragonFruit.Six.Api.Modern
@using DragonFruit.Six.Api.Modern.Enums
@using Havit.Linq
@using Humanizer
@using Realms
@using System.ComponentModel

<div class="d6-operator-card-header flex-md-row justify-content-md-between">
    <h3 class="m-0">Operator Stats</h3>
    <div class="d6-operator-card-header-options flex-md-nowrap">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" @bind="FilterUnplayed">
            <label class="form-check-label">Filter unplayed</label>
        </div>

        <HxDropdownButtonGroup Direction="DropdownDirection.Down">
            <HxDropdownToggleButton CssClass="text-light border" Color="ThemeColor.None">
                @SortMode.Humanize()
            </HxDropdownToggleButton>
            <HxDropdownMenu CssClass="dropdown-menu-dark">
                @foreach (var sortMode in Enum.GetValues<OperatorSortMode>())
                {
                    <HxDropdownItem OnClick="() => SortMode = sortMode">@sortMode.Humanize()</HxDropdownItem>
                }
            </HxDropdownMenu>
        </HxDropdownButtonGroup>
    </div>
</div>

@if (Stats != null)
{
    var groups = Stats.ToLookup(x => x.Info.Type);
    <div class="d6-stat-container mt-4">
        @foreach (var group in groups.OrderBy(x => x.Key))
        {
            <div>
                <h4 class="m-0 mb-2 text-center">@group.Key.Humanize().Pluralize()</h4>
                <hr class="w-100 text-secondary"/>
                <div class="d6-operator-card-container">
                    @foreach (var op in GetDisplayableGroup(group))
                    {
                        <StatsOperatorCard Info="op.Info" Stats="op.Stats"/>
                    }
                </div>
            </div>
        }
    </div>
}

@code {

    [Parameter]
    public UbisoftAccount Account { get; set; }

    [Inject]
    private Dragon6Client Client { get; set; }

    private bool FilterUnplayed { get; set; }
    private OperatorSortMode SortMode { get; set; } = OperatorSortMode.RoundsPlayed;
    private IReadOnlyCollection<OperatorStatsContainer> Stats { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var operatorStatsContainer = await Client.GetModernOperatorStatsAsync(Account, PlaylistType.Independent, OperatorType.Attacker | OperatorType.Defender, startDate: DateTime.UtcNow.AddDays(-Screens.Stats.Stats.ModernStatsRange)).ConfigureAwait(false);
        var operatorStats = operatorStatsContainer.AllModes.AsAttacker.Concat(operatorStatsContainer.AllModes.AsDefender);

        using var realm = await Realm.GetInstanceAsync();

        // because realm entities are locked to the thread the realm was created on, the items need to be frozen to allow read-only access on render threads.
        Stats = realm.All<OperatorInfo>().ToList().LeftJoin(operatorStats, x => x.Id, x => x.Name.ToLowerInvariant(), (info, stats) => new OperatorStatsContainer(info.Freeze(), stats)).ToList();
    }

    private IEnumerable<OperatorStatsContainer> GetDisplayableGroup(IEnumerable<OperatorStatsContainer> stats)
    {
    // perform filtering first, then partition based on whether the operator has been played.
        var filteredGroups = FilterUnplayed ? stats.Where(x => x.Stats?.RoundsPlayed > 0) : stats;

        if (SortMode is OperatorSortMode.Default)
            return filteredGroups;

        var partitionedGroups = filteredGroups.ToLookup(x => x.Stats != null);

        return SortMode switch
        {
            OperatorSortMode.Kd => partitionedGroups[true].OrderByDescending(x => x.Stats.Kd).Concat(partitionedGroups[false]),
            OperatorSortMode.Wl => partitionedGroups[true].OrderByDescending(x => x.Stats.RoundWl).Concat(partitionedGroups[false]),
            OperatorSortMode.RoundsPlayed => partitionedGroups[true].OrderByDescending(x => x.Stats.RoundsPlayed).Concat(partitionedGroups[false]),

            _ => throw new ArgumentOutOfRangeException()
            };
    }

    private enum OperatorSortMode
    {
        Default,
        RoundsPlayed,

        [Description("K/D")]
        Kd,

        [Description("W/L")]
        Wl
    }

    private class OperatorStatsContainer
    {
        public OperatorStatsContainer(OperatorInfo info, ModernOperatorStats stats)
        {
            Info = info;
            Stats = stats;
        }

        public OperatorInfo Info { get; set; }
        public ModernOperatorStats Stats { get; set; }
    }

}