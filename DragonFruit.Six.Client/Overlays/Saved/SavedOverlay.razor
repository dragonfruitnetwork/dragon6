@using DragonFruit.Six.Client.Database.Services
@using Realms
@using DragonFruit.Six.Client.Database.Entities
@using DragonFruit.Six.Api.Accounts.Enums
@using DragonFruit.Six.Api.Accounts.Entities
@using DragonFruit.Six.Client.Network.User
@using DragonFruit.Six.Client.Database
@implements IDisposable

@if (Profiles?.Any() == true)
{
    <div class="d6-account-grid">
        @foreach (var saved in Profiles)
        {
            <SavedAccountCard Info="saved.info" Account="saved.account" User="saved.user"/>
        }
    </div>
}
else
{
    <div class="d6-overlay-center-content">
        <i class="fa-solid fa-star text-warning fa-2x"></i>

        <div>
            <h4>Save a user for future access.</h4>
            <p>Pressing the star on the right hand side of the account info will save an account to this area so that you can find them easily. It also shows you their best rank in the current season!</p>
        </div>
    </div>
}

@code {

    private Realm _realm;
    private IDisposable _notificationListener;

    [Inject]
    private SavedPlayerRankService StatsService { get; set; }

    [Inject]
    private AccountLookupCache AccountLookup { get; set; }

    [Inject]
    private UserLookupCache UserLookup { get; set; }

    private IReadOnlyCollection<(SavedAccount info, UbisoftAccount account, Dragon6User user)> Profiles { get; set; }

    private async Task UpdateAccountRegistry(IRealmCollection<SavedAccount> saved)
    {
        var savedAccounts = saved.Freeze();
        var accountSearchTasks = savedAccounts
            .AsEnumerable()
            .GroupBy(x => PlatformUtils.GetPlatform(x.PlatformName))
            .Select(x => AccountLookup.LookupAsync(x.Select(y => y.UbisoftId).ToList(), x.Key, IdentifierType.UserId));

        var users = await UserLookup.LookupAsync(saved.Select(x => x.UbisoftId).ToList(), Platform.PC, IdentifierType.UserId);
        var accounts = await Task.WhenAll(accountSearchTasks).ConfigureAwait(false);

        // use query syntax as using functional api looks bad
        var profiles = from info in savedAccounts
                       join account in accounts.SelectMany(x => x) on info.ProfileId equals account.ProfileId
                       join user in users on info.UbisoftId equals user.UbisoftId
                       orderby info.SavedAt
                       select (info, account, user);

        Profiles = profiles.ToList();
    }

    protected override void OnInitialized()
    {
        StatsService.StartService();
    }

    protected override async Task OnInitializedAsync()
    {
        _realm = await Realm.GetInstanceAsync();
        _notificationListener = _realm.All<SavedAccount>().SubscribeForNotifications((sender, changes, error) =>
        {
            if (Profiles != null && changes == null)
            {
                return;
            }

            UpdateAccountRegistry(sender).ContinueWith(_ => InvokeAsync(StateHasChanged));
        });
    }

    public void Dispose()
    {
        _realm?.Dispose();
        _notificationListener?.Dispose();
    }

}