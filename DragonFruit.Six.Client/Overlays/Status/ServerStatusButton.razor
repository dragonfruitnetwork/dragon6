@using DragonFruit.Six.Api
@using DragonFruit.Six.Api.Services.Status
@using System.Threading
@using DragonFruit.Six.Client.Database
@using Humanizer
@implements IDisposable

@{
    var iconColour = Status switch
    {
        ServerStatus.Online => "#4caf50",
        ServerStatus.Interrupted => "#ffc107",
        ServerStatus.Degraded => "#f44336",
        ServerStatus.Maintenance => "#607d8b",

        _ => "royalblue"
        };
}

<Dragon6HeaderButton Icon="globe"
                     CssClass="@($"color: {iconColour}")"
                     Clicked="() => Platform.OpenUrl(StatusUrl)"
                     Name="@(IsMenuButton ? "Servers" : $"Rainbow Six Servers {Status?.Humanize() ?? "Unknown"}")"
                     LayoutMode="@(IsMenuButton ? Dragon6HeaderButton.ButtonLayoutMode.Card : Dragon6HeaderButton.ButtonLayoutMode.Normal)"/>

@code {

    private Timer _timer;

    private const string StatusUrl = "https://www.ubisoft.com/en-us/game/rainbow-six/siege/status";

    [Parameter]
    public bool IsMenuButton { get; set; }

    [Inject]
    private Dragon6Client Client { get; set; }

    [Inject]
    private IDragon6Platform Platform { get; set; }

    private ServerStatus? Status { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _timer = new Timer(_ => UpdateStatus(), null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    private async Task UpdateStatus()
    {
        var serverStatus = await Client.GetServerStatusAsync().ConfigureAwait(false);
        Status = serverStatus.Max(x => x.Status);

        _ = InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}