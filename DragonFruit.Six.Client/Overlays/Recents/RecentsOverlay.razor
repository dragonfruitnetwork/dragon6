@using DragonFruit.Six.Client.Database.Entities
@using DragonFruit.Six.Client.Overlays.Search
@using Realms
@using DragonFruit.Six.Api.Accounts.Enums
@implements IDisposable

@if (Accounts?.Any() == true)
{
    <div class="d6-account-grid">
        @foreach (var user in Accounts.OrderByDescending(x => x.LastSearched).Select(x => x.Freeze()))
        {
            <RecentAccountCard Account="user" Clicked="() => SearchProviderState.TriggerSearch(user.UbisoftId, user.Platform, IdentifierType.UserId)"/>
        }
    </div>

    <hr class="text-secondary my-3"/>

    <div class="d-flex justify-content-end">
        <HxButton CssClass="btn-text d6-icon-button text-danger" OnClick="() => _realm.WriteAsync(() => _realm.RemoveAll<RecentAccount>())">
            <span class="material-icons-round">delete</span>
            <span>Clear All</span>
        </HxButton>
    </div>
}
else
{
    <div class="d6-overlay-center-content">
        <span class="material-icons-round fa-2x">history</span>
        
        <div>
            <h4>Lookup a user and they will appear here.</h4>
            <p>Dragon6 stores the most recent @RecentsOverlayInfo.MaxAccounts.ToString() users, along with their last username so you can find a user even if they've rebranded themselves.</p>
        </div>
    </div>
}

@code {

    private Realm _realm;
    private IDisposable _notification;

    [CascadingParameter]
    private SearchProviderState SearchProviderState { get; set; }

    private IRealmCollection<RecentAccount> Accounts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _realm ??= await Realm.GetInstanceAsync();
        _notification = _realm.All<RecentAccount>().SubscribeForNotifications((sender, changes, _) =>
        {
            if (changes == null)
            {
                Accounts = sender;
            }

            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        _notification?.Dispose();
        _realm?.Dispose();
    }

}